// AUTOGENERATED FROM index-iso-8859-10.txt, ORIGINAL COMMENT FOLLOWS:
//
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
//
// For details on index-iso-8859-10.txt see the Encoding Standard
// http://encoding.spec.whatwg.org/

static FORWARD_TABLE: &'static [u16] = &[
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
    158, 159, 160, 260, 274, 290, 298, 296, 310, 167, 315, 272, 352, 358, 381,
    173, 362, 330, 176, 261, 275, 291, 299, 297, 311, 183, 316, 273, 353, 359,
    382, 8213, 363, 331, 256, 193, 194, 195, 196, 197, 198, 302, 268, 201, 280,
    203, 278, 205, 206, 207, 208, 325, 332, 211, 212, 213, 214, 360, 216, 370,
    218, 219, 220, 221, 222, 223, 257, 225, 226, 227, 228, 229, 230, 303, 269,
    233, 281, 235, 279, 237, 238, 239, 240, 326, 333, 243, 244, 245, 246, 361,
    248, 371, 250, 251, 252, 253, 254, 312,
];

#[inline]
pub fn forward(code: u8) -> u16 {
    FORWARD_TABLE[(code - 0x80) as uint]
}

pub fn backward(code: u16) -> u8 {
    match code {
        128 => 128, 129 => 129, 130 => 130, 131 => 131, 132 => 132, 133 => 133,
        134 => 134, 135 => 135, 136 => 136, 137 => 137, 138 => 138, 139 => 139,
        140 => 140, 141 => 141, 142 => 142, 143 => 143, 144 => 144, 145 => 145,
        146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151,
        152 => 152, 153 => 153, 154 => 154, 155 => 155, 156 => 156, 157 => 157,
        158 => 158, 159 => 159, 160 => 160, 260 => 161, 274 => 162, 290 => 163,
        298 => 164, 296 => 165, 310 => 166, 167 => 167, 315 => 168, 272 => 169,
        352 => 170, 358 => 171, 381 => 172, 173 => 173, 362 => 174, 330 => 175,
        176 => 176, 261 => 177, 275 => 178, 291 => 179, 299 => 180, 297 => 181,
        311 => 182, 183 => 183, 316 => 184, 273 => 185, 353 => 186, 359 => 187,
        382 => 188, 8213 => 189, 363 => 190, 331 => 191, 256 => 192,
        193 => 193, 194 => 194, 195 => 195, 196 => 196, 197 => 197, 198 => 198,
        302 => 199, 268 => 200, 201 => 201, 280 => 202, 203 => 203, 278 => 204,
        205 => 205, 206 => 206, 207 => 207, 208 => 208, 325 => 209, 332 => 210,
        211 => 211, 212 => 212, 213 => 213, 214 => 214, 360 => 215, 216 => 216,
        370 => 217, 218 => 218, 219 => 219, 220 => 220, 221 => 221, 222 => 222,
        223 => 223, 257 => 224, 225 => 225, 226 => 226, 227 => 227, 228 => 228,
        229 => 229, 230 => 230, 303 => 231, 269 => 232, 233 => 233, 281 => 234,
        235 => 235, 279 => 236, 237 => 237, 238 => 238, 239 => 239, 240 => 240,
        326 => 241, 333 => 242, 243 => 243, 244 => 244, 245 => 245, 246 => 246,
        361 => 247, 248 => 248, 371 => 249, 250 => 250, 251 => 251, 252 => 252,
        253 => 253, 254 => 254, 312 => 255, _ => 0
    }
}

#[cfg(test)]
mod tests {
    use super::{forward, backward};

    #[test]
    fn test_correct_table() {
        for i in range(128, 256) {
            let i = i as u8;
            let j = forward(i);
            if j != 0xffff { assert_eq!(backward(j), i); }
        }
    }
}
