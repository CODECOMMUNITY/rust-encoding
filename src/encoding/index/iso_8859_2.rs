// AUTOGENERATED FROM index-iso-8859-2.txt, ORIGINAL COMMENT FOLLOWS:
//
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
//
// For details on index-iso-8859-2.txt see the Encoding Standard
// http://encoding.spec.whatwg.org/

static FORWARD_TABLE: &'static [u16] = &[
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
    143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,
    158, 159, 160, 260, 728, 321, 164, 317, 346, 167, 168, 352, 350, 356, 377,
    173, 381, 379, 176, 261, 731, 322, 180, 318, 347, 711, 184, 353, 351, 357,
    378, 733, 382, 380, 340, 193, 194, 258, 196, 313, 262, 199, 268, 201, 280,
    203, 282, 205, 206, 270, 272, 323, 327, 211, 212, 336, 214, 215, 344, 366,
    218, 368, 220, 221, 354, 223, 341, 225, 226, 259, 228, 314, 263, 231, 269,
    233, 281, 235, 283, 237, 238, 271, 273, 324, 328, 243, 244, 337, 246, 247,
    345, 367, 250, 369, 252, 253, 355, 729,
];

#[inline]
pub fn forward(code: u8) -> u16 {
    FORWARD_TABLE[(code - 0x80) as uint]
}

pub fn backward(code: u16) -> u8 {
    match code {
        128 => 128, 129 => 129, 130 => 130, 131 => 131, 132 => 132, 133 => 133,
        134 => 134, 135 => 135, 136 => 136, 137 => 137, 138 => 138, 139 => 139,
        140 => 140, 141 => 141, 142 => 142, 143 => 143, 144 => 144, 145 => 145,
        146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151,
        152 => 152, 153 => 153, 154 => 154, 155 => 155, 156 => 156, 157 => 157,
        158 => 158, 159 => 159, 160 => 160, 260 => 161, 728 => 162, 321 => 163,
        164 => 164, 317 => 165, 346 => 166, 167 => 167, 168 => 168, 352 => 169,
        350 => 170, 356 => 171, 377 => 172, 173 => 173, 381 => 174, 379 => 175,
        176 => 176, 261 => 177, 731 => 178, 322 => 179, 180 => 180, 318 => 181,
        347 => 182, 711 => 183, 184 => 184, 353 => 185, 351 => 186, 357 => 187,
        378 => 188, 733 => 189, 382 => 190, 380 => 191, 340 => 192, 193 => 193,
        194 => 194, 258 => 195, 196 => 196, 313 => 197, 262 => 198, 199 => 199,
        268 => 200, 201 => 201, 280 => 202, 203 => 203, 282 => 204, 205 => 205,
        206 => 206, 270 => 207, 272 => 208, 323 => 209, 327 => 210, 211 => 211,
        212 => 212, 336 => 213, 214 => 214, 215 => 215, 344 => 216, 366 => 217,
        218 => 218, 368 => 219, 220 => 220, 221 => 221, 354 => 222, 223 => 223,
        341 => 224, 225 => 225, 226 => 226, 259 => 227, 228 => 228, 314 => 229,
        263 => 230, 231 => 231, 269 => 232, 233 => 233, 281 => 234, 235 => 235,
        283 => 236, 237 => 237, 238 => 238, 271 => 239, 273 => 240, 324 => 241,
        328 => 242, 243 => 243, 244 => 244, 337 => 245, 246 => 246, 247 => 247,
        345 => 248, 367 => 249, 250 => 250, 369 => 251, 252 => 252, 253 => 253,
        355 => 254, 729 => 255, _ => 0
    }
}

#[cfg(test)]
mod tests {
    use super::{forward, backward};

    #[test]
    fn test_correct_table() {
        for i in range(128, 256) {
            let i = i as u8;
            let j = forward(i);
            if j != 0xffff { assert_eq!(backward(j), i); }
        }
    }
}
