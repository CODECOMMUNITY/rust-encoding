// AUTOGENERATED FROM index-windows-1256.txt, ORIGINAL COMMENT FOLLOWS:
//
// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/
//
// For details on index-windows-1256.txt see the Encoding Standard
// http://encoding.spec.whatwg.org/

static FORWARD_TABLE: &'static [u16] = &[
    8364, 1662, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 1657, 8249, 338,
    1670, 1688, 1672, 1711, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 1705,
    8482, 1681, 8250, 339, 8204, 8205, 1722, 160, 1548, 162, 163, 164, 165,
    166, 167, 168, 169, 1726, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 182, 183, 184, 185, 1563, 187, 188, 189, 190, 1567, 1729, 1569, 1570,
    1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
    1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 215, 1591, 1592, 1593,
    1594, 1600, 1601, 1602, 1603, 224, 1604, 226, 1605, 1606, 1607, 1608, 231,
    232, 233, 234, 235, 1609, 1610, 238, 239, 1611, 1612, 1613, 1614, 244,
    1615, 1616, 247, 1617, 249, 1618, 251, 252, 8206, 8207, 1746,
];

#[inline]
pub fn forward(code: u8) -> u16 {
    FORWARD_TABLE[(code - 0x80) as uint]
}

pub fn backward(code: u16) -> u8 {
    match code {
        8364 => 128, 1662 => 129, 8218 => 130, 402 => 131, 8222 => 132,
        8230 => 133, 8224 => 134, 8225 => 135, 710 => 136, 8240 => 137,
        1657 => 138, 8249 => 139, 338 => 140, 1670 => 141, 1688 => 142,
        1672 => 143, 1711 => 144, 8216 => 145, 8217 => 146, 8220 => 147,
        8221 => 148, 8226 => 149, 8211 => 150, 8212 => 151, 1705 => 152,
        8482 => 153, 1681 => 154, 8250 => 155, 339 => 156, 8204 => 157,
        8205 => 158, 1722 => 159, 160 => 160, 1548 => 161, 162 => 162,
        163 => 163, 164 => 164, 165 => 165, 166 => 166, 167 => 167, 168 => 168,
        169 => 169, 1726 => 170, 171 => 171, 172 => 172, 173 => 173,
        174 => 174, 175 => 175, 176 => 176, 177 => 177, 178 => 178, 179 => 179,
        180 => 180, 181 => 181, 182 => 182, 183 => 183, 184 => 184, 185 => 185,
        1563 => 186, 187 => 187, 188 => 188, 189 => 189, 190 => 190,
        1567 => 191, 1729 => 192, 1569 => 193, 1570 => 194, 1571 => 195,
        1572 => 196, 1573 => 197, 1574 => 198, 1575 => 199, 1576 => 200,
        1577 => 201, 1578 => 202, 1579 => 203, 1580 => 204, 1581 => 205,
        1582 => 206, 1583 => 207, 1584 => 208, 1585 => 209, 1586 => 210,
        1587 => 211, 1588 => 212, 1589 => 213, 1590 => 214, 215 => 215,
        1591 => 216, 1592 => 217, 1593 => 218, 1594 => 219, 1600 => 220,
        1601 => 221, 1602 => 222, 1603 => 223, 224 => 224, 1604 => 225,
        226 => 226, 1605 => 227, 1606 => 228, 1607 => 229, 1608 => 230,
        231 => 231, 232 => 232, 233 => 233, 234 => 234, 235 => 235,
        1609 => 236, 1610 => 237, 238 => 238, 239 => 239, 1611 => 240,
        1612 => 241, 1613 => 242, 1614 => 243, 244 => 244, 1615 => 245,
        1616 => 246, 247 => 247, 1617 => 248, 249 => 249, 1618 => 250,
        251 => 251, 252 => 252, 8206 => 253, 8207 => 254, 1746 => 255, _ => 0
    }
}

#[cfg(test)]
mod tests {
    use super::{forward, backward};

    #[test]
    fn test_correct_table() {
        for i in range(128, 256) {
            let i = i as u8;
            let j = forward(i);
            if j != 0xffff { assert_eq!(backward(j), i); }
        }
    }
}
